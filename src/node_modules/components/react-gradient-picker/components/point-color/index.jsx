import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { withStyles } from 'material-ui/styles';
import Button from 'material-ui/Button';

const styleSheet = theme => ({
  buttonContainer: {
    position: 'absolute',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    whiteSpace: 'nowrap'
  },
  title: {
    position: 'relative',
  },
  button: {
    ...theme.muiTheme.button,
    position: 'relative',
    zIndex: 3,
    padding: 0,
    margin: 0,
    backgroundSize: '40px 40px',
    backgroundRepeat: 'no-repeat',
    boxShadow: '0 2px 5px 0 rgba(26, 26, 27, .47)',
    borderRadius: '50%',
    cursor: 'pointer',
    outline: 'none',
    '&:focus': {
      filter: 'drop-shadow(0 0 2px rgba(0, 0, 0, .6))',
    },
    '&:focus + div': {
      filter: 'drop-shadow(0 0 2px rgba(0, 0, 0, .6))',
    }
  },
  line: {
    position: 'absolute',
    top: '100%',
    height: '25px',
    width: '1px',
    backgroundColor: 'rgba(0, 0, 0, .2)',
    zIndex: '2',
    boxShadow: '0 2px 5px 0 rgba(26, 26, 27, 0.47)',
  }
});

function PointColor(props) {
  const positionX = props.data.step;

  const mouseDownHandler = () => {
    props.activePinColor(props.data);
  };

  return (
    <Fragment>
      <div
        className={props.classes.buttonContainer} 
        style={{
          left: `${positionX}%`,
          transform: `translateX(-${Math.floor(props.widthPoint / 2) - 1}px)`,
        }}
      >
        <Button
          size="small"
          variant="fab"
          aria-label="color"
          className={props.classes.button}
          onMouseDown={mouseDownHandler}
          style={{
            backgroundColor: props.isActive ? '#2babcf' : '#ed3e49',
            width: `${props.widthPoint}px`,
            minWidth: `${props.widthPoint}px`,
            minHeight: `${props.heightPoint}px`,
            height: `${props.heightPoint}px`,
          }}
        />
      </div>
      <div className={props.classes.line} style={{ left: `${positionX}%` }} />
    </Fragment>
  );
}

PointColor.defaultProps = {
  data: {},
  isActive: false,
  activePinColor: () => {},
  widthPoint: 0,
  heightPoint: 0,
};

PointColor.propTypes = {
  data: PropTypes.object.isRequired,
  isActive: PropTypes.bool.isRequired,
  activePinColor: PropTypes.func.isRequired,
  widthPoint: PropTypes.func.isRequired,
  heightPoint: PropTypes.func.isRequired,
};

export default withStyles(styleSheet)(PointColor);
